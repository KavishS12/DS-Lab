{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include<stdio.h>\
#include<stdlib.h>\
struct node\{\
    int data;\
    struct node *next;\
\};\
struct node *head;\
struct node *createList()\{\
    int val;\
    struct node *temp=(struct node*)malloc(sizeof(struct node));\
    printf("enter the element to be inserted");\
    scanf("%d",&temp->data);\
    temp->next=NULL;\
    if(head==NULL)\{\
        head=temp;\
        return head;\
    \}\
    struct node* curr=head;\
    while(curr->next!=NULL)\{\
        curr=curr->next;\
    \}\
    curr->next=temp;\
        return head;\
\}\
struct node *insertBefore()\{\
    int key,val;\
     \
    if(head==NULL)\{\
        printf("list is empty");\
    \}\
    struct node *temp=(struct node*)malloc(sizeof(struct node));\
    struct node *prev,*current;\
    prev=NULL;\
    printf("enter the element before which you want to insert\\n");\
    scanf("%d",&key);\
   \
    \
        printf("enter the element to be inserted");\
    scanf("%d",&val);\
        current=head;\
        while(current->data!=key&&current!=NULL)\{\
            prev=current;\
            current=current->next;\
            if(current==NULL)\{\
            printf("element not found\\n");\
            return head;\
        \
        \}\
        /*if(current==NULL)\{\
            printf("element not found");\
            return head;\
        \}*/\
        prev->next=temp;\
        temp->next=current;\
        temp->data=val;\
        return head;\
    \}\
    \
\}\
struct node *insertAfter()\{\
    int key,val;\
    if(head==NULL)\{\
       printf("list is empty");\
    \}\
    printf("enter the element after which you want to insert\\n");\
    scanf("%d",&key);\
     struct node *current=(struct node*)malloc(sizeof(struct node));\
     struct node *temp=(struct node*)malloc(sizeof(struct node));;\
     printf("enter the element to be inserted");\
    scanf("%d",&val);\
    current=head;\
        while(current->data!=key&&current!=NULL)\{\
            current=current->next;\
        \}\
        temp->data=val;\
        temp->next=current->next;\
        current->next=temp;\
    return head;\
\}\
void display()\{\
    struct node *temp=(struct node*)malloc(sizeof(struct node));\
    temp=head;\
    while(temp!=NULL)\{\
        \
        printf("%d",temp->data);\
    temp=temp->next;\}\
    printf("\\n");\
\}\
struct node *deletePositin()\{\
    struct node *temp=(struct node*)malloc(sizeof(struct node));\
    struct node *prev;\
    temp=head;\
    int key;\
    printf("enter the element to be deleted\\n");\
    scanf("%d",&key);\
    if(head->data==key)\{\
        head=head->next;\
        free(temp);\
        return head;\
    \}\
    while(temp->data!=key&&temp!=NULL)\{\
        prev=temp;\
        temp=temp->next;\
    \}\
    prev->next=temp->next;\
    free(temp);\
    return head;\
\}\
struct node *deleteAlternate()\{\
    struct node *temp=(struct node*)malloc(sizeof(struct node));\
    struct node *prev=(struct node*)malloc(sizeof(struct node));\
    prev=head;\
    temp=head->next;\
    while(temp!=NULL&&prev!=NULL)\{\
        prev->next=temp->next;\
        free(temp);\
        if(prev!=NULL)\{\
            temp=prev->next;\
        \}\
    \}\
    return head;\
\}\
struct node *reverse()\{\
    struct node *curr = head;\
    struct node *prev = NULL;\
    struct node *forw;\
    while(curr!=NULL)\{\
        forw = curr->next;\
        curr->next = prev;\
        prev = curr;\
        curr = forw;\
    \}\
    head = prev;\
\}\
int main()\{ int choice;\
head=createList();\
head=createList();\
    head=createList();\
    head=createList();\
    //head =insertAfter();\
    //display();\
    //head=deletePositin();\
    //display();\
    head=createList();\
    //head=deleteAlternate();\
    display();\
    head=reverse();\
display();\
    \
   \
   \
    return 0;\
\}\
\
}
{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww29200\viewh18400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include<stdio.h>\
 #include<stdlib.h>\
typedef struct node\
\{\
int data;\
struct node *left;\
struct node *right;\
\} node;\
 \
node *create()\
\{\
node *p;\
int x;\
printf("Enter data(-1 for no data):");\
scanf("%d",&x);\
if(x==-1)\
return NULL;\
p=(node*)malloc(sizeof(node));\
p->data=x;\
printf("Enter left child of %d:\\n",x);\
p->left=create();\
 \
printf("Enter right child of %d:\\n",x);\
p->right=create();\
return p;\
\}\
 \
void preorder(node *t) //address of root node is passed in t\
\{\
if(t!=NULL)\
\{\
printf("\\n%d",t->data); //visit the root\
preorder(t->left); //preorder traversal on left subtree\
preorder(t->right); //preorder traversal om right subtree\
\}\
\}\
int height(node *t)\{\
    if(t==NULL)\
    return 0;\
    int leftDepth=height(t->left);\
    int rightDepth=height(t->right);\
    return ((leftDepth>rightDepth)?(leftDepth+1):(rightDepth+1));\
\}\
 int leafNodes(node *t)\{\
    if(t==NULL)\
    return 0;\
    if(t->left==NULL && t->right==NULL)\
    return 1;\
    return leafNodes(t->left)+leafNodes(t->right);\
 \}\
 node *findParent(node *t)\{\
     int target;\
     printf("enter the data of node whose parent is to be found \\n");\
     scanf("%d",&target);\
     if(t==NULL || (t->right!=NULL && t->right->data==target) || (t->left!=NULL && t->left->data==target))\
     return t;\
     node *leftResult=findParent(t->left);\
     node *rightResult=findParent(t->right);\
    return (leftResult!=NULL)?leftResult:rightResult;\
 \}\
 int findAncestors(node *t,int taregt)\{\
     int target;\
    // printf("enter data of node whose ancestors are to be found\\n");\
    // scanf("%d",&target);\
     if(t==NULL)\
     return 0;\
     if(t->data==target)\
     return 1;\
     if(findAncestors(t->left,target) || findAncestors(t->right,target))\{\
         printf("%d \\n",t->data);\
         return 1;\
     \}\
     return 0;\
 \}\
int main()\
\{\
node *root,*temp;\
int target;\
root=create();\
printf("\\nThe preorder traversal of tree is:\\n");\
preorder(root);\
printf("\\n");\
int k=height(root);\
printf("height of tree is %d",k);\
int ln=leafNodes(root);\
printf("\\n number of leaf nodes are %d \\n",ln);\
//temp=findParent(root);\
//printf("parent of given node is %d",temp->data);\
 printf("enter data of node whose ancestors are to be found\\n");\
     scanf("%d",&target);\
printf("ancestors of the given nodes are :\\n");\
findAncestors(root,target);\
return 0;\
\}}